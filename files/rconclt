#! /usr/bin/env python3
"""rconclt.

A Minecraft RCON client.

Usage:
    rconclt <server> <command> [<args>...] [options]

Options:
    --passwd=<passwd>   Specifies the respective RCON password.
    --debug             Enters debug mode.
    --help, -h          Shows this page.
"""
from logging import INFO, basicConfig, getLogger
from sys import exit as exit_, stderr

from docopt import docopt

from mcipc.config import servers
from mcipc.rcon.client import Client


LOGGER = getLogger(__file__)
_LOG_FORMAT = '[%(levelname)s] %(name)s: %(message)s'


def _get_server_info(server):
    """Returns host, port and password of the RCON server."""

    try:
        host, port = server.split(':')
    except ValueError:
        try:
            return servers()[server]
        except KeyError:
            LOGGER.error('No such server: %s.', server)
            exit_(3)

    try:
        port = int(port)
    except ValueError:
        LOGGER.error('Not an integer: %s.', port)
        exit_(2)

    try:
        passwd, host = host.split('@')
    except ValueError:
        passwd = None

    return (host, port, passwd)


def main(options):
    """Test the packet stuff."""

    log_level = DEBUG if options['--debug'] else INFO
    basicConfig(level=log_level, format=_LOG_FORMAT)
    host, port, passwd = _get_server_info(options['<server>'])

    if passwd is None:
        passwd = options['--passwd'] or ''

    with Client(host, port) as client:
        if client.login(passwd):
            result = client.run(options['<command>'], *options['<args>'])
            LOGGER.info(result)
        else:
            LOGGER.error('Failed to log in.')
            exit_(1)


if __name__ == '__main__':
    main(docopt(__doc__))
